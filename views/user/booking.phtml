<div class="container mt-4">
    <h2 class="mb-4">My Bookings</h2>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="table-light">
                <tr>
                    <th>Booking ID</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Status</th>
                    <th>Price per kWh</th>
                </tr>
            </thead>
            <tbody id="bookings-table-body">
                <!-- Dynamically populated -->

                <tr id="loading-row">
                    <td colspan="5" class="text-center">
                        <div class="spinner-border text-primary" role="status" style="width: 2rem; height: 2rem;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading bookings...</span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
    function updateBookings() {
        fetch('<?= PREFIX ?>/booking.php?action=get_bookings')
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById('bookings-table-body');
                tbody.innerHTML = data.bookings.map(booking => `
                    <tr>
                        <td>#${booking.id}</td>
                        <td>${booking.start_time}</td>
                        <td>${booking.end_time}</td>
                        <td>
                            <span class="badge ${getBadgeClass(booking.status)}">
                                ${booking.status.toUpperCase()}
                            </span>
                        </td>
                        <td>BHD ${booking.price_per_kwh.toFixed(3)}</td>
                    </tr>
                `).join('');
            })
            .catch(error => {
                console.error('Error fetching bookings:', error);
            });
    }

    function getBadgeClass(status) {
        return {
            'pending': 'bg-warning',
            'approved': 'bg-success',
            'denied': 'bg-danger',
            'completed': 'bg-info'
        } [status] || 'bg-secondary';
    }

    // Initial load
    updateBookings();

    // Refresh every second
    setInterval(updateBookings, 1000);
</script>